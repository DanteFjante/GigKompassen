@using GigKompassen.Blazor.Models.Status

@inject ILogger<PageStatus> Logger
@inject StatusCollection StatusCollection

@if (StatusCollection != null && StatusCollection.StatusEntries.Any())
{
  <div class="container-fluid">
    <div class="row">
      <div class="col-4">
        @foreach (var subject in GetSubjects())
        {
          foreach (var entry in StatusCollection.GetEntries(subject))
          {
            <div class="alert alert-@entry.GetColor() alert-dismissible fade show position-relative" role="alert" @key="entry">
              @if (entry.Instances == 1)
              {
                <div class="alert-subject">@entry.Subject</div>
              }
              else
              {
                <div class="alert-subject">(@entry.Instances) @entry.Subject</div>
              }

              <i class="bi bi-@entry.GetIcon()" />
              <span class="alert-message">@entry.Message</span>

              @if (!string.IsNullOrEmpty(entry.Link))
              {
                <a href="@entry.Link" class="alert-link" target="_blank"> Click Here</a>
              }

              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                      @onclick="() => DismissEntry(entry)">
              </button>
            </div>
          }
        }
      </div>
    </div>
  </div>
}

@code {

  [Parameter]
  public string Subjects { get; set; } = string.Empty;

  protected override void OnInitialized()
  {
    if (StatusCollection != null)
    {
      StatusCollection.OnChange += UpdateStatus;
    }
  }

  private void UpdateStatus()
  {
    InvokeAsync(StateHasChanged); // Re-render the component
  }

  private void DismissEntry(StatusEntry entry)
  {
    StatusCollection.RemoveEntry(entry);
  }

  public void Dispose()
  {
    if (StatusCollection != null)
    {
      StatusCollection.OnChange -= UpdateStatus;
    }
  }

  public List<string> GetSubjects() 	{
    if(string.IsNullOrWhiteSpace(Subjects))
		{
			return StatusCollection.GetSubjects();
		}
		else
		{
			return Subjects.Split(';').Select(s => s.Trim()).ToList();
		}
	}
}