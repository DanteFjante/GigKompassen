@using GigKompassen.Blazor.Components.Profile
@using GigKompassen.Blazor.Models.Status
@using GigKompassen.Enums
@using GigKompassen.Models.Accounts
@using GigKompassen.Models.Profiles
@using GigKompassen.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using GigKompassen.Blazor.Components.Account.Shared
@using System.ComponentModel.DataAnnotations


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<CreateArtistProfileComponent> Logger
@inject ArtistService ArtistService
@inject UserManager<ApplicationUser> UserManager
@inject StatusCollection StatusCollection
	
<EditForm Model="this.Input" OnValidSubmit="SubmitProfile" FormName="CreateArtistProfile" @ref="this.editForm">
	<DataAnnotationsValidator />
	<ValidationSummary />
	

	<h5>Create Artist Profile</h5>
	<hr />
	
	<!-- Name -->
	<div class="form-group">
		<label>Name</label>
		<InputText @bind-Value="this.Input.Profile.Name" class="form-control" />
		<ValidationMessage For="@(() => this.Input.Profile.Name)" />
	</div>

	<!-- Location -->
	<div class="form-group">
		<label>Location</label>
		<InputText @bind-Value="this.Input.Profile.Location" class="form-control" />
		<ValidationMessage For="@(() => this.Input.Profile.Location)" />
	</div>

	<!-- Availability -->
	<div class="form-group">
		<label>Availability</label>
		<InputSelect @bind-Value="this.Input.Profile.Availability" class="form-control">
			@foreach (AvailabilityStatus status in Enum.GetValues(typeof(AvailabilityStatus)))
			{
				<option value="@status">@status</option>
			}
		</InputSelect>
		<ValidationMessage For="@(() => this.Input.Profile.Availability)" />
	</div>

	<!-- Bio -->
	<div class="form-group">
		<label>Bio</label>
		<InputTextArea @bind-Value="this.Input.Profile.Bio" class="form-control" />
		<ValidationMessage For="@(() => this.Input.Profile.Bio)" />
	</div>

	<!-- Description -->
	<div class="form-group">
		<label>Description</label>
		<InputTextArea @bind-Value="this.Input.Profile.Description" class="form-control" />
		<ValidationMessage For="@(() => this.Input.Profile.Description)" />
	</div>

	<!-- Genres -->
	<div class="form-group">
		<label>Genres</label>
		<table class="table">
			<thead>
				<tr>
					<th>Name</th>
					<th>
						<button type="button" @onclick="AddGenre" class="btn btn-sm btn-success">Add Genre</button>
					</th>
				</tr>
			</thead>
			<tbody>
				@for (int i = 0; i < this.Input.Genres.Count; i++)
				{
					var index = i;
					<tr>
						<td>
							<InputText @bind-Value="this.Input.Genres[index]" class="form-control" />
						</td>
						<td>
							<!-- This will delete the current row, as it refers to the specific index 'i' in this.Input iteration -->
							<button type="button" @onclick="() => RemoveGenre(index)" class="btn btn-sm btn-danger">Delete</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	<!-- Artist Members -->
	<div class="form-group">
		<label>Artist Members</label>
		<table class="table">
			<thead>
				<tr>
					<th>Name</th>
					<th>Role</th>
					<th>
						<button type="button" @onclick="AddMember" class="btn btn-sm btn-success">Add Member</button>
					</th>
				</tr>
			</thead>
			<tbody>
				@for (int i = 0; i < this.Input.Members.Count; i++)
				{
					var index = i;
					<tr>
						<td>
							<InputText @bind-Value="this.Input.Members[index].Name" class="form-control" />
						</td>
						<td>
							<InputText @bind-Value="this.Input.Members[index].Role" class="form-control" />
						</td>
						<td>
							<!-- This will delete the current row, as it refers to the specific index 'i' in this iteration -->
							<button type="button" @onclick="() => RemoveMember(index)" class="btn btn-sm btn-danger">Delete</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
	
</EditForm>

@code {

	EditForm editForm;

	[Parameter]
	public Action<Func<Task>> SubscribeToSubmit { get; set; }

	private InputModel Input { get; set; } = new InputModel();


	public ArtistProfile? ArtistProfile { get; set; }

	protected override Task OnInitializedAsync()
	{
		SubscribeToSubmit?.Invoke(SubmitProfile);
		return base.OnInitializedAsync();
	}



	public async Task SubmitForm()
	{
		if (editForm != null)
		{
			if(editForm.EditContext.Validate())
			{
				editForm.OnValidSubmit.InvokeAsync(editForm.EditContext);
			}
		}
	}


	private async Task SubmitProfile()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		bool authenticated = authState.User.Identity?.IsAuthenticated ?? false;
		if(!authenticated)
		{
			AddError("User is not authenticated");
			Logger.LogError("User is not authenticated");
			return;
		}
		var user = await UserManager.GetUserAsync(authState.User);
		if(ArtistProfile != null)
		{
			AddError("Artist profile already exists");
			Logger.LogError("Artist profile already exists");
			return;
		}
		else
		{
			try
			{
				ArtistProfile = await ArtistService.CreateAsync(user.Id, this.GetArtistProfileDto(), this.GetGenres(), this.GetArtistMemberDtos());
				AddSuccess("Artist profile created successfully", $"/Profile/Artist/{ArtistProfile.Id}");
			} 
			catch (Exception e)
			{
				AddError("Failed to create artist profile");
				Logger.LogError(e, "Failed to create artist profile");
			}
		}
	}

	private void AddError(string message, string? link = null)
	{
		StatusCollection.AddEntry<CreateArtistProfileComponent>(StatusType.Danger, message, link);
	}

	private void AddSuccess(string message, string link = null)
	{
		StatusCollection.AddEntry<CreateArtistProfileComponent>(StatusType.Success, message, link);
	}

	private void AddGenre()
	{
		this.Input.Genres.Add("");
	}
	private void RemoveGenre(int index)
	{
		this.Input.Genres.RemoveAt(index);
	}
	private void AddMember()
	{
		this.Input.Members.Add(new ArtistMemberViewModel());
	}
	private void RemoveMember(int index)
	{
		this.Input.Members.RemoveAt(index);
	}

	private List<ArtistMemberDto> GetArtistMemberDtos()
	{
		return this.Input.Members.Select(m => new ArtistMemberDto(Guid.NewGuid(), m.Name, m.Role)).ToList();
	}

	private List<string> GetGenres()
	{
		return this.Input.Genres;
	}

	private CreateArtistDto GetArtistProfileDto()
	{
		return new CreateArtistDto(
			this.Input.Profile.Name, 
			this.Input.Profile.Location, 
			this.Input.Profile.Bio, 
			this.Input.Profile.Description, 
			this.Input.Profile.Availability, true);
	}

	private class InputModel
	{
		public ArtistProfileViewModel Profile { get; set; } = new ArtistProfileViewModel();
		public List<string> Genres { get; set; } = new List<string>();
		public List<ArtistMemberViewModel> Members { get; set; } = new List<ArtistMemberViewModel>();
	}

	private class ArtistProfileViewModel
	{
		[Required]
		[MinLength(3, ErrorMessage = "Artist name must be at least 3 characters long")]
		[MaxLength(30, ErrorMessage = "Artist name can't be longer than 30 characters")]
		public string Name { get; set; } = string.Empty;

		[Required]
		public string Location { get; set; } = string.Empty;
		
		[Required]
		public AvailabilityStatus Availability { get; set; } = AvailabilityStatus.Open;
		
		[Required]
		public string Bio { get; set; } = string.Empty;
		
		[Required]
		public string Description { get; set; } = string.Empty;
	}

	private class ArtistMemberViewModel
	{
		[Required]
		[MinLength(3, ErrorMessage = "Name must be at least 3 characters long")]
		[MaxLength(30, ErrorMessage = "Name can't be longer than 30 characters")]
		public string Name { get; set; } = string.Empty;

		[Required]
		public string Role { get; set; } = string.Empty;
	}
}